package com.dev.museummate.service;

import com.dev.museummate.domain.UserRole;
import com.dev.museummate.domain.dto.review.EditReviewRequest;
import com.dev.museummate.domain.dto.review.ReviewDto;
import com.dev.museummate.domain.dto.review.WriteReviewRequest;
import com.dev.museummate.domain.entity.ExhibitionEntity;
import com.dev.museummate.domain.entity.ReviewEntity;
import com.dev.museummate.domain.entity.UserEntity;
import com.dev.museummate.exception.AppException;
import com.dev.museummate.exception.ErrorCode;
import com.dev.museummate.repository.ExhibitionRepository;
import com.dev.museummate.repository.ReviewRepository;
import com.dev.museummate.repository.UserRepository;
import java.util.Collection;
import java.util.Objects;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.stereotype.Service;

@Service
@Slf4j
@RequiredArgsConstructor
public class ReviewService {

    private final UserRepository userRepository;
    private final ExhibitionRepository exhibitionRepository;
    private final ReviewRepository reviewRepository;

    /*
    Service Layer returns Dto to Controller Layer
     */
    public ReviewDto writeReview(String email,
                                           WriteReviewRequest writeReviewRequest,
                                           Long exhibitionId) {
        // Ïú†Ï†Ä Í≤ÄÏ¶ù (Ìïú Î≤à Îçî ÌïòÎäî Í≤É)
        UserEntity user = userRepository.findByEmail(email)
                .orElseThrow(() -> new AppException(ErrorCode.USERNAME_NOT_FOUND, String.format("Username %s Not Found.üò¢", email)));

        // Ï†ÑÏãúÌöå Í≤ÄÏ¶ù
        ExhibitionEntity exhibition = exhibitionRepository.findById(exhibitionId)
                .orElseThrow(() -> new AppException(ErrorCode.EXHIBITION_NOT_FOUND, "Exhibition not found"));


        // Î¶¨Î∑∞ Îì±Î°ù
        // ReviewEntity ÏÉùÏÑ±
        ReviewEntity review = ReviewEntity.builder()
                .title(writeReviewRequest.getTitle())
                .content(writeReviewRequest.getContent())
                .star(writeReviewRequest.getStar())
                .visitedDate(writeReviewRequest.getVisitedDate())
                .user(user)
                .exhibition(exhibition)
                .build();

        // dbÏóê reviewÎ•º Ï†ÄÏû•
        reviewRepository.save(review);

        // ReviewDto ÏÉùÏÑ±
        ReviewDto savedReviewDto = ReviewDto.toDto(review);

        return savedReviewDto;
    }

    // [] Î¶¨Î∑∞ ÏÇ≠Ï†ú
    public ReviewDto deleteReview(Long reviewId, String userEmail, Collection<? extends GrantedAuthority> userRole) {

        UserEntity reviewer = userRepository.findByEmail(userEmail) // Ïú†Ï†Ä Í≤ÄÏ¶ù
                                        .orElseThrow(() -> new AppException(ErrorCode.USERNAME_NOT_FOUND, String.format("Username %s Not Found.", userEmail)));

        ReviewEntity reviewEntity = reviewRepository.findById(reviewId) // Î¶¨Î∑∞ Í≤ÄÏ¶ù
                                                    .orElseThrow(()
                                                                     -> new AppException(ErrorCode.CONTENT_NOT_FOUND, String.format("Content %s Not Found.", reviewId)));

        if(!Objects.equals(reviewEntity.getUser().getId(), reviewer.getId()) &&
            !userRole.stream().findFirst().get().getAuthority().equals(UserRole.ROLE_ADMIN.toString())) {
            throw new AppException(ErrorCode.INVALID_PERMISSION, ""); // Î¶¨Î∑∞ ÏûëÏÑ±Ïûê ÏùºÏπò Ïó¨Î∂Ä and ÏÇ≠Ï†úÏûê Í∂åÌïú ADMIN Ïó¨Î∂Ä Í≤ÄÏ¶ù
        }

        reviewRepository.delete(reviewEntity); //Í≤ÄÏ¶ù ÌÜµÍ≥º Ïãú ÏÇ≠Ï†ú

        ReviewDto deletedReview = ReviewDto.builder() // ÏÇ≠Ï†ú ÏôÑÎ£åÌïú Î¶¨Î∑∞ Î≤àÌò∏Î°ú DTO ÏÉùÏÑ±ÌïòÏó¨ Ïª®Ìä∏Î°§Îü¨ Î†àÏù¥Ïñ¥Î°ú Î∞òÌôò
            .id(reviewId)
            .build();

        return deletedReview;
    }
		
		    /*
    Î¶¨Î∑∞ ÏàòÏ†ï Î°úÏßÅ
     */
    public ReviewDto editReview(String authEmail,
                                EditReviewRequest editReviewRequest,
                                Long reviewId) {
        // Ïú†Ï†Ä Í≤ÄÏ¶ù
        UserEntity user = userRepository.findByEmail(authEmail)
                                        .orElseThrow(() -> new AppException(ErrorCode.USERNAME_NOT_FOUND, "Username Not Found."));

        // Î¶¨Î∑∞ Í≤ÄÏ¶ù
        ReviewEntity reviewEntity = reviewRepository.findById(reviewId)
                                                    .orElseThrow(() -> new AppException(ErrorCode.CONTENT_NOT_FOUND, "Review Not Found."));

        // Î¶¨Î∑∞ ÏûëÏÑ±ÏûêÍ∞Ä Ïú†Ï†ÄÏù∏ÏßÄ Í≤ÄÏ¶ù
        if (!Objects.equals(reviewEntity.getUser().getEmail(), authEmail)) {
            throw new AppException(ErrorCode.INVALID_PERMISSION, "");
        }

        // requestÎ•º entityÎ°ú Î≥ÄÍ≤Ω
        ReviewEntity editRequestToEntity = reviewEntity.toEntity(editReviewRequest);

        // ReviewEntity ÏàòÏ†ï
        reviewEntity.editReview(editRequestToEntity);

        reviewEntity = reviewRepository.save(reviewEntity);

        // Î≥ÄÍ≤ΩÎêú ReviewDto ÏÉùÏÑ±
        ReviewDto editedReviewDto = ReviewDto.toDto(reviewEntity);

        // Î≥ÄÍ≤ΩÎêú ReviewDto Î∞òÌôò
        return editedReviewDto;
    }

    // Î¶¨Î∑∞ ÏÉÅÏÑ∏ Ï°∞Ìöå
    public ReviewDto getReview(Long reviewId) {

        ReviewEntity review = reviewRepository.findById(reviewId)
                                              .orElseThrow(() -> new AppException(ErrorCode.REVIEW_NOT_FOUND, String.format("ReviewId #%d Not found", reviewId)));

        ReviewDto reviewDto = ReviewDto.toDto(review);

        return reviewDto;
		}

}
